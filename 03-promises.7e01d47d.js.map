{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,OAAQL,SAASC,cAAc,WAKjC,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAACP,WAAUC,S,GAEnBA,E,IAKP,SAASQ,EAAST,EAAUC,GAC1BS,EAAArB,GAASsB,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,MAC5D,CACAa,QAAS,K,CAGrB,SAASC,EAAQf,EAAUC,GACzBS,EAAArB,GAASsB,OAAOK,QAAQ,sBAAqCH,OAAfb,EAAS,QAAYa,OAANZ,EAAM,MACjE,CACEa,QAAS,K,CAzBfvB,EAAKC,KAAKyB,iBAAiB,UA6BzB,SAAsBC,GACpBA,EAAGC,iBAKH,IAJA,IAAMC,EAAWC,OAAO9B,EAAKI,WAAW2B,OAClCC,EAAUF,OAAO9B,EAAKK,UAAU0B,OAChCzB,EAAcwB,OAAO9B,EAAKM,YAAYyB,OACxCE,EAAcJ,EACTK,EAAI,EAAGA,GAAK5B,EAAa4B,IAChC1B,EAAc0B,EAAGD,GACdE,MAAK,SAAAC,GACJlB,EADekB,EAAR3B,SAAe2B,EAAL1B,M,IAGlB2B,OAAM,SAAAD,GACLZ,EADgBY,EAAR3B,SAAe2B,EAAL1B,M,IAGtBuB,GAAeD,EAEjBhC,EAAKC,KAAKqC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = { \n  form: document.querySelector('form'),\n  inputDelay: document.querySelector('[name=\"delay\"]'),\n  inputStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n  button: document.querySelector('button')\n}\n\nrefs.form.addEventListener('submit', handelSubmit)\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => { \n      if (shouldResolve) {\n        resolve({ position, delay })\n     } else { \n        reject({position, delay})\n      }\n    }, delay)\n  })\n}\n\n\nfunction onSucces(position, delay){\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`,\n          {\n            timeout: 1000,\n          });\n}\nfunction onError(position, delay) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`,\n    {\n      timeout: 1000,\n    });\n}\n\n  function handelSubmit(ev) {\n    ev.preventDefault();\n    const inpDelay = Number(refs.inputDelay.value);\n    const inpStep = Number(refs.inputStep.value);\n    const inputAmount = Number(refs.inputAmount.value);\n    let stepCounter = inpDelay;\n    for (let i = 1; i <= inputAmount; i++) {\n      createPromise(i, stepCounter)\n        .then(({ position, delay }) => {\n          onSucces(position, delay);\n        })\n        .catch(({ position, delay }) => {\n          onError(position, delay);\n        });\n      stepCounter += inpStep;\n    }\n    refs.form.reset();\n  }"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","button","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$onSucces","$parcel$interopDefault","Notify","success","concat","timeout","$ce04d3a99e08e73b$var$onError","failure","addEventListener","ev","preventDefault","inpDelay","Number","value","inpStep","stepCounter","i","then","param","catch","reset"],"version":3,"file":"03-promises.7e01d47d.js.map"}